[gd_resource type="Shader" format=3 uid="uid://b250aletub3mn"]

[resource]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_disabled, diffuse_burley, specular_schlick_ggx;

uniform float alpha_scissor_threshold : hint_range(0.0, 1.0, 0.01) = 0.15;

uniform sampler2D albedo_tex : source_color, filter_linear_mipmap, repeat_enable;
uniform vec3 albedo_multiply : source_color = vec3(1.0);

uniform sampler2D normal_tex : hint_normal, filter_linear_mipmap, repeat_enable;
uniform float normal_strength : hint_range(-16.0, 16.0) = 1.0;

/**
* R: Roughness
* G: Ambient Occlusion
* B: Transmission -> 1.0 means Backlight is used there, 0.0 means no Backlight.
*/
uniform sampler2D rough_ao_transmission_tex : hint_default_white, filter_linear_mipmap, repeat_enable;

/**
* This is added to value coming from Red channel of \"Rough AO Transmission Tex\", to allow fast tweaking.
*/
uniform float roughness_offset : hint_range(-1.0, 1.0) = 0.0;

/**
* [b]0[/b]: No AO.
* [b]>0[/b]: Uses Green channel of \"Rough AO Transmission Tex\".
 */
uniform float ao_strength : hint_range(0.0, 10.0) = 1.0;

/**
* [b]0[/b]: AO only affects ambient light.
* [b]1[/b]: Affects direct lights just as much as it affects ambient light. This can be used to impact the strength of the ambient occlusion effect, but typically looks unrealistic.
 */
uniform float ao_light_affect : hint_range(0.0, 1.0) = 0.8;

/**
* [b]0[/b]: Uses darkish grey (so it has similar brightness to Albedo Tex and isn't unnaturally bright).
* [b]1[/b]: Uses color from Albedo Tex.
* Backlight is only visible where Blue channel (= Transmission) of \"Rough AO Transmission Tex\" > 0.0 !
* Result is finally multiplied by \"Backlight Tint\" & \"Backlight Strength\" for finetuning.
*/
uniform float backlight_color_from_albedo : hint_range(0.0, 1.0) = 1.0;

/**
* Multiplies the resulting Backlight with this color.
* This is independent of \"Color from Albedo\".
* ATTENTION: Reducing this color's Value reduces the effect!
*/
uniform vec3 backlight_tint : source_color = vec3(1.0);

/**
* Multiplies down Backlight intensity where AO is present in \"Rough AO Transmission Tex\".
*/
uniform float backlight_affected_by_ao : hint_range (0.0, 10.0) = 0.5;

/**
* Finally multiplies the resulting Backlight with this strength.
*/
uniform float backlight_strength : hint_range (0.0, 10.0) = 1.0;

uniform float rim_strength : hint_range(0.0, 1.0) = 0.03;

/**
* [b]0[/b]: Uses Light's color.
* [b]1[/b]: Uses color from Albedo Tex - which makes effect less visible! Might need to increase \"Rim Strength\"!
* Should use medium value.
*/
uniform float rim_color_from_albedo : hint_range(0.0, 1.0) = 0.5;


void vertex() {
}

void fragment() {
	vec2 base_uv = UV;
	// See https://github.com/godotengine/godot/issues/42411
	if (!FRONT_FACING) {
		NORMAL = -NORMAL;
	}

	vec4 albedo_w_alpha = texture(albedo_tex, base_uv);
	vec3 rough_ao_trans = texture(rough_ao_transmission_tex, base_uv).rgb;

	ALPHA = albedo_w_alpha.a;
	ALPHA_SCISSOR_THRESHOLD = alpha_scissor_threshold;
	ALBEDO = albedo_w_alpha.rgb * albedo_multiply.rgb;

	METALLIC = 0.0;
	SPECULAR = 0.5;
	ROUGHNESS = rough_ao_trans.r + roughness_offset;

	NORMAL_MAP = texture(normal_tex, base_uv).rgb;
	NORMAL_MAP_DEPTH = normal_strength;

	AO = mix(1.0, rough_ao_trans.g, ao_strength);
	AO_LIGHT_AFFECT = ao_light_affect;


	vec3 overall_backlight =
	rough_ao_trans.b
	* backlight_strength
	* backlight_tint
	* mix(vec3(0.3), albedo_w_alpha.rgb, backlight_color_from_albedo)
	* mix(1.0, rough_ao_trans.g, backlight_affected_by_ao);

	BACKLIGHT = clamp(overall_backlight, 0.0, 500.0);

	RIM = rim_strength;
	RIM_TINT = rim_color_from_albedo;
}
"
