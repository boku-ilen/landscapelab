[gd_resource type="ShaderMaterial" load_steps=6 format=3 uid="uid://b26nu6gpqlovf"]

[ext_resource type="Texture2D" uid="uid://b8otwpf8100d" path="res://Resources/Textures/Buildings/facade/plaster_white.jpg" id="1"]
[ext_resource type="Texture2D" uid="uid://c26k818ryw8sd" path="res://Resources/Textures/Buildings/facade/normalmap_plaster.jpg" id="2"]
[ext_resource type="Texture2D" uid="uid://cdbi4nnlw1jtw" path="res://Resources/Textures/Buildings/facade/plaster_metallic.jpg" id="3"]
[ext_resource type="Texture2D" uid="uid://2ing3u6wp6lx" path="res://Resources/Textures/Buildings/facade/plaster_roughness.jpg" id="4"]

[sub_resource type="Shader" id="1"]
code = "shader_type spatial;

uniform sampler2D texture_albedo : source_color;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform sampler2D texture_metallic : hint_default_white;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_default_white;
uniform vec4 roughness_texture_channel;
uniform sampler2D texture_emission : hint_default_black;
uniform vec4 emission : source_color;
uniform float emission_energy;
uniform sampler2D texture_normal : hint_normal;
uniform float normal_scale : hint_range(-16,16);
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

uniform bool lights_on = false;
uniform bool window_shading = true;

varying vec3 worldpos;


void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
	worldpos = (MODEL_MATRIX * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
}

float rand(vec3 co){
    return fract(sin(dot(co.xyz ,vec3(12.9898,78.233,54.1463))) * 43758.5453);
}

void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	
	// Modulate color with vertex color - this is more performant than a color uniform
	ALBEDO = COLOR.rgb * albedo_tex.rgb;
	
	float metallic_tex = dot(texture(texture_metallic,base_uv),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	float roughness_tex = dot(texture(texture_roughness,base_uv),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
	NORMAL_MAP = texture(texture_normal,base_uv).rgb;
	NORMAL_MAP_DEPTH = normal_scale;
	
	if (lights_on) {
		int random_seed = int(rand(round(worldpos)) * rand(vec3(floor(UV), 0.0)) * 100000.0);
		bool light_here = random_seed % 3 == 2;
		
		if (light_here) {
			float emission_tex = texture(texture_emission, base_uv).r;
			EMISSION = (emission.rgb*emission_tex) * (emission_energy * (0.1 + fract(float(int(floor(UV.x)) * random_seed) / 1000.0) * 0.9));
		}
	}
}"

[resource]
resource_local_to_scene = true
render_priority = 0
shader = SubResource("1")
shader_parameter/specular = 0.5
shader_parameter/metallic = 1.0
shader_parameter/roughness = 1.0
shader_parameter/point_size = 1.0
shader_parameter/metallic_texture_channel = Plane(1, 0, 0, 0)
shader_parameter/roughness_texture_channel = Plane(1, 0, 0, 0)
shader_parameter/emission = Color(1, 0.866667, 0.67451, 1)
shader_parameter/emission_energy = 6.0
shader_parameter/normal_scale = 3.0
shader_parameter/uv1_scale = Vector3(1, 1, 1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)
shader_parameter/lights_on = false
shader_parameter/window_shading = true
shader_parameter/texture_albedo = ExtResource("1")
shader_parameter/texture_metallic = ExtResource("3")
shader_parameter/texture_roughness = ExtResource("4")
shader_parameter/texture_emission = ExtResource("3")
shader_parameter/texture_normal = ExtResource("2")
