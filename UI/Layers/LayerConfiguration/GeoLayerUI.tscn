[gd_scene load_steps=6 format=3 uid="uid://cjffk3dvuivj5"]

[ext_resource type="Texture2D" uid="uid://djgdeb68xdbg5" path="res://Resources/Icons/ModernLandscapeLab/vector_save.svg" id="2_3ylfg"]
[ext_resource type="Texture2D" uid="uid://c3kuxlnuadbrl" path="res://Resources/Icons/ModernLandscapeLab/eyes.svg" id="3_3nst3"]
[ext_resource type="Script" uid="uid://jih5yvkgwg17" path="res://UI/Layers/LayerConfiguration/GeoLayerOptions.gd" id="4_hvmms"]

[sub_resource type="GDScript" id="GDScript_1r6x1"]
script/source = "extends ItemList


@onready var geo_layer_ui = get_parent()


func _ready():
	item_clicked.connect(func(idx, pos, mouse_button):
		var lname = get_item_metadata(idx).get_file_info()[\"name\"]
		geo_layer_ui.geolayer_visibility_changed.emit(lname, true))


func get_items():
	var items = []
	for idx in range(item_count):
		items.append({ \"name\": get_item_text(idx), \"z_idx\": item_count - idx })
	return items


func _gui_input(event):
	if event is InputEventMouseButton and event.button_index == MOUSE_BUTTON_RIGHT:
		select(get_item_at_position(event.position, true))
		$GeoLayerOptions.menu_popup(
			Rect2(event.global_position, Vector2(4, 4)),
			get_item_metadata(get_selected_items()[0]) if not get_selected_items().is_empty() else null
		)

#
# Functionality for reordering list entries
#

func _can_drop_data(at_position, data):
	if not \"geolayer\" in data: return
	return data.geolayer is GeoFeatureLayer or data.geolayer is GeoRasterLayer


func _drop_data(at_position, data):
	var item_idx = get_item_at_position(at_position)
	move_item(data.idx, item_idx)
	geo_layer_ui.z_index_changed.emit(get_items())


func _get_drag_data(at_position):
	var item_idx = get_item_at_position(at_position)
	var item_metadata = get_item_metadata(item_idx)
	var item_name = get_item_text(item_idx)
	
	var data = {\"idx\": item_idx, \"geolayer\": item_metadata}
	var preview = Label.new()
	preview.text = item_name
	set_drag_preview(preview)
	
	return data
"

[sub_resource type="GDScript" id="GDScript_6q6fw"]
script/source = "extends Configurator


@export var geo_layer_ui: Control
@export var list: ItemList


func _ready():
	# if the UI was instanced later than the world, we need to check for already instanced layers
	for layer in Layers.geo_layers[\"rasters\"]:
		add_geo_layer(Layers.geo_layers[\"rasters\"][layer])
	
	for layer in Layers.geo_layers[\"features\"]:
		add_geo_layer(Layers.geo_layers[\"features\"][layer])
	
	Layers.new_geo_layer.connect(add_geo_layer)
	#geo_layer_ui.z_index_changed.emit(list.get_items())


func add_geo_layer(geo_layer: RefCounted):
	var new_layer_idx = list.add_item(geo_layer.get_file_info()[\"name\"])
	list.set_item_metadata(new_layer_idx, geo_layer)


func remove_geo_layer(geo_layer_name: String):
	for i in range(list.item_count):
		if list.get_item_text(i) == geo_layer_name:
			list.remove_item(i)
"

[node name="GeoLayerUI" type="VBoxContainer"]
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
offset_bottom = -270.0
grow_horizontal = 2
grow_vertical = 2
size_flags_horizontal = 3
size_flags_vertical = 3

[node name="ItemList" type="ItemList" parent="."]
custom_minimum_size = Vector2(0, 167)
layout_mode = 2
size_flags_vertical = 3
allow_search = false
script = SubResource("GDScript_1r6x1")

[node name="GeoLayerOptions" type="PopupMenu" parent="ItemList"]
size = Vector2i(223, 100)
always_on_top = true
item_count = 2
item_0/text = "Show"
item_0/icon = ExtResource("3_3nst3")
item_0/checkable = 1
item_0/id = 1
item_1/text = "Save Layer Edits..."
item_1/icon = ExtResource("2_3ylfg")
item_1/id = 1
script = ExtResource("4_hvmms")

[node name="GeoLayerUIConfig" type="Node" parent="." node_paths=PackedStringArray("geo_layer_ui", "list")]
script = SubResource("GDScript_6q6fw")
geo_layer_ui = NodePath("..")
list = NodePath("../ItemList")
